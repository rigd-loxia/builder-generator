package nl.loxia.builder.generator.ap.test.validation;

import static org.assertj.core.api.Assertions.assertThatNoException;
import static org.assertj.core.api.Assertions.assertThatThrownBy;

import org.junit.jupiter.api.extension.RegisterExtension;
import org.mapstruct.ap.testutil.ProcessorTest;
import org.mapstruct.ap.testutil.WithClasses;
import org.mapstruct.ap.testutil.compilation.annotation.ProcessorOption;
import org.mapstruct.ap.testutil.runner.GeneratedSource;

import nl.loxia.builder.generator.annotations.BuilderValidationException;

public class ValidationTest {

    @RegisterExtension
    GeneratedSource generatedSource = new GeneratedSource();

    @ProcessorTest
    @WithClasses(ValidationSingleConstructorArgument.class)
    void validationWithSingleArgument() {
        ValidationSingleConstructorArgumentBuilder<?> builder = new ValidationSingleConstructorArgumentBuilder<>();

        assertThatThrownBy(builder::build)
            .isInstanceOf(BuilderValidationException.class)
            .hasMessageContaining("required");
        builder.withRequired("reqField");
        assertThatNoException().isThrownBy(builder::build);
    }

    @ProcessorTest
    @WithClasses(ValidationMultipleConstructorArgument.class)
    void validationWithMultipleArgument() {
        ValidationMultipleConstructorArgumentBuilder<?> builder = new ValidationMultipleConstructorArgumentBuilder<>();

        assertThatThrownBy(builder::build)
            .isInstanceOf(BuilderValidationException.class)
            .hasMessageContaining("otherRequired")
            .hasMessageContaining("required");
        builder.withOtherRequired("reqField");
        assertThatThrownBy(builder::build)
            .isInstanceOf(BuilderValidationException.class)
            .hasMessageContaining("required");
        builder.withRequired("reqField");
        assertThatNoException().isThrownBy(builder::build);
    }

    @ProcessorTest
    @WithClasses(ValidationMultipleConstructorArgument.class)
    void validationWithMultipleArgumentOtherOrderOfSetting() {
        ValidationMultipleConstructorArgumentBuilder<?> builder = new ValidationMultipleConstructorArgumentBuilder<>();

        assertThatThrownBy(builder::build)
            .isInstanceOf(BuilderValidationException.class)
            .hasMessageContaining("otherRequired")
            .hasMessageContaining("required");
        builder.withRequired("reqField");
        assertThatThrownBy(builder::build)
            .isInstanceOf(BuilderValidationException.class)
            .hasMessageContaining("otherRequired");
        builder.withOtherRequired("reqField");
        assertThatNoException().isThrownBy(builder::build);
    }

    @ProcessorTest
    @ProcessorOption(name = "nl.loxia.BuilderGenerator.builderValidation", value = "false")
    @WithClasses(ValidationMultipleConstructorArgument.class)
    void disabledValidationThroughProcessorOptionThenNoException() {
        // cannot do test here with generated code, because it will use the builder generated by the test compilation.
        generatedSource.forBuilder(ValidationMultipleConstructorArgument.class)
            .content()
            .doesNotContain("BuilderValidationException");
    }

    @ProcessorTest
    @WithClasses(DisabledValidation.class)
    void disabledValidationThroughBuilderOptionThenNoException() {
        DisabledValidationBuilder<?> builder = new DisabledValidationBuilder<>();

        assertThatNoException().isThrownBy(builder::build);
        generatedSource.forBuilder(DisabledValidation.class)
            .content()
            .doesNotContain("BuilderValidationException");
    }
}
