package nl.loxia.builder.generator.ap.test.javadoc;

import org.junit.jupiter.api.extension.RegisterExtension;
import org.mapstruct.ap.testutil.ProcessorTest;
import org.mapstruct.ap.testutil.WithClasses;
import org.mapstruct.ap.testutil.runner.GeneratedSource;

import nl.loxia.builder.generator.ap.test.BuildableObject;
import nl.loxia.builder.generator.ap.test.seealso.DuplicateField;
import nl.loxia.builder.generator.ap.test.seealso.SeeAlso;
import nl.loxia.builder.generator.ap.test.seealso.SeeAlsoAnnotated;
import nl.loxia.builder.generator.ap.test.seealso.SeeAlsoAnnotated2;
import nl.loxia.builder.generator.ap.test.seealso.SeeAlsoTarget;

@WithClasses({ JavadocAnnotatedFields.class, BuildableObject.class, SeeAlso.class,
    SeeAlsoAnnotated.class, SeeAlsoAnnotated2.class, SeeAlsoTarget.class, DuplicateField.class })

public class JavadocTest {

    @RegisterExtension
    GeneratedSource generatedSource = new GeneratedSource();

    @ProcessorTest
    void shouldGenerateJavadocAtConstructor() {
        generatedSource.forBuilder(JavadocAnnotatedFields.class).content()
            .containsSequence(
                "/**", System.lineSeparator(),
                " * Generated by RIGD-Loxia Builder generator", System.lineSeparator(),
                " */", System.lineSeparator(),
                "public class JavadocAnnotatedFieldsBuilder<PARENT> {");
    }

    @ProcessorTest
    void shouldGenerateJavadocAtEndMethod() {
        generatedSource.forBuilder(JavadocAnnotatedFields.class).content()
            .containsSequence(
                "    /**", System.lineSeparator(),
                "     * returns the parent builder if present, otherwise null is returned.", System.lineSeparator(),
                "     */", System.lineSeparator(),
                "    public PARENT end() {");
    }

    @ProcessorTest
    void shouldGenerateJavadocAtBuildMethod() {
        generatedSource.forBuilder(JavadocAnnotatedFields.class).content()
            .containsSequence(
                "    /**", System.lineSeparator(),
                "     * returns the build object. For builder chaining use the {@link #end()} method to return the parent builder.",
                System.lineSeparator(),
                "     */", System.lineSeparator(),
                "    public JavadocAnnotatedFields build() {");
    }

    @ProcessorTest
    void shouldGenerateJavadocAtChainingMethod() {
        generatedSource.forBuilder(JavadocAnnotatedFields.class).content()
            .containsSequence(
                "    /**", System.lineSeparator(),
                "     * This field is used as an example for javadoc generation on with methods.<BR>", System.lineSeparator(),
                "     * <BR>", System.lineSeparator(),
                "     * returns a builder for chaining. Use the end() method to return back to the current builder.<BR>",
                System.lineSeparator(),
                "     * Multiple calls to this method will return the same builder.<BR>", System.lineSeparator(),
                "     * If this is called after {@link #withObject(nl.loxia.builder.generator.ap.test.BuildableObject)} "
                    + "then this will return a new Builder and the previously set object is lost.",
                System.lineSeparator(),
                "     */", System.lineSeparator(),
                "    public nl.loxia.builder.generator.ap.test.BuildableObjectBuilder<? extends JavadocAnnotatedFieldsBuilder<PARENT>> withObject() {");
    }

    @ProcessorTest
    void shouldGenerateJavadocAtSetMethod() {
        generatedSource.forBuilder(JavadocAnnotatedFields.class).content()
            .containsSequence(
                "    /**", System.lineSeparator(),
                "     * This field is used as an example for javadoc generation on with methods.<BR>", System.lineSeparator(),
                "     * <BR>", System.lineSeparator(),
                "     * If this is called after {@link #withObject()} then the Builder is lost.", System.lineSeparator(),
                "     */", System.lineSeparator(),
                "    public JavadocAnnotatedFieldsBuilder<PARENT> withObject(nl.loxia.builder.generator.ap.test.BuildableObject object) {");
    }

    @ProcessorTest
    void shouldGenerateJavadocAtAddListMethod() {
        generatedSource.forBuilder(JavadocAnnotatedFields.class).content()
            .containsSequence(
                "    /**", System.lineSeparator(),
                "     * List field with javadoc.<BR>", System.lineSeparator(),
                "     * <BR>", System.lineSeparator(),
                "     * Each call to this method creates a new Builder which will be stored in the list. Use the end() method to return back to the current builder.",
                System.lineSeparator(),
                "     */", System.lineSeparator(),
                "    public nl.loxia.builder.generator.ap.test.BuildableObjectBuilder<? extends JavadocAnnotatedFieldsBuilder<PARENT>> addList() {")
            .containsSequence(
                "    /**", System.lineSeparator(),
                "     * List field with javadoc.<BR>", System.lineSeparator(),
                "     * <BR>", System.lineSeparator(),
                "     * this will add the supplied objects to the collection present. If an unmodifiable collection is set "
                    + "using {@link #withList(java.util.List)} then an Exception can be thrown.",
                System.lineSeparator(),
                "     */", System.lineSeparator(),
                "    public JavadocAnnotatedFieldsBuilder<PARENT> addList(Iterable<? extends nl.loxia.builder.generator.ap.test.BuildableObject> list) {")
            .containsSequence(
                "    /**", System.lineSeparator(),
                "     * List field with javadoc.<BR>", System.lineSeparator(),
                "     * <BR>", System.lineSeparator(),
                "     * this will add the supplied objects to the collection present. If an unmodifiable collection is set "
                    + "using {@link #withList(java.util.List)} then an Exception can be thrown.",
                System.lineSeparator(),
                "     */", System.lineSeparator(),
                "    public JavadocAnnotatedFieldsBuilder<PARENT> addList(nl.loxia.builder.generator.ap.test.BuildableObject... list) {");
    }

    @ProcessorTest
    void shouldGenerateJavadocAtSeeAlsoReferencedMethod() {
        generatedSource.forBuilder(JavadocAnnotatedFields.class).content()
            .containsSequence(
                "    /**", System.lineSeparator(),
                "     * See also field with javadoc.", System.lineSeparator(),
                "     */", System.lineSeparator(),
                "    public nl.loxia.builder.generator.ap.test.seealso.SeeAlsoTargetBuilder")
            .containsSequence(
                "    /**", System.lineSeparator(),
                "     * See also field with javadoc.", System.lineSeparator(),
                "     */", System.lineSeparator(),
                "    public nl.loxia.builder.generator.ap.test.seealso.DuplicateFieldBuilder");
    }
}
