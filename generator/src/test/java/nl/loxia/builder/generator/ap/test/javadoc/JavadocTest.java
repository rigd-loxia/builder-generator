package nl.loxia.builder.generator.ap.test.javadoc;

import org.junit.jupiter.api.extension.RegisterExtension;
import org.mapstruct.ap.testutil.ProcessorTest;
import org.mapstruct.ap.testutil.WithClasses;
import org.mapstruct.ap.testutil.runner.GeneratedSource;

import nl.loxia.builder.generator.ap.test.BuildableObject;

public class JavadocTest {

    @RegisterExtension
    GeneratedSource generatedSource = new GeneratedSource();

    @ProcessorTest
    @WithClasses({ JavadocAnnotatedFields.class, BuildableObject.class })
    void shouldGenerateJavadocAtConstructor() {
        generatedSource.forBuilder(JavadocAnnotatedFields.class).content()
            .containsSequence(
                "/**", System.lineSeparator(),
                " * Generated by RIGD-Loxia Builder generator", System.lineSeparator(),
                " */", System.lineSeparator(),
                "public class JavadocAnnotatedFieldsBuilder<PARENT> {");
    }

    @ProcessorTest
    @WithClasses({ JavadocAnnotatedFields.class, BuildableObject.class })
    void shouldGenerateJavadocAtEndMethod() {
        generatedSource.forBuilder(JavadocAnnotatedFields.class).content()
            .containsSequence(
                "    /**", System.lineSeparator(),
                "     * returns the parent builder if present, otherwise null is returned.", System.lineSeparator(),
                "     */", System.lineSeparator(),
                "    public PARENT end() {");
    }

    @ProcessorTest
    @WithClasses({ JavadocAnnotatedFields.class, BuildableObject.class })
    void shouldGenerateJavadocAtBuildMethod() {
        generatedSource.forBuilder(JavadocAnnotatedFields.class).content()
            .containsSequence(
                "    /**", System.lineSeparator(),
                "     * returns the build object. For builder chaining use the {@link #end()} method to return the previous builder.",
                System.lineSeparator(),
                "     */", System.lineSeparator(),
                "    public JavadocAnnotatedFields build() {");
    }

    @ProcessorTest
    @WithClasses({ JavadocAnnotatedFields.class, BuildableObject.class })
    void shouldGenerateJavadocAtChainingMethod() {
        generatedSource.forBuilder(JavadocAnnotatedFields.class).content()
            .containsSequence(
                "    /**", System.lineSeparator(),
                "     * This field is used as an example for javadoc generation on with methods.", System.lineSeparator(),
                "     *", System.lineSeparator(),
                "     * returns a builder for chaining. Use the end() method to return back to the current builder.",
                System.lineSeparator(),
                "     */", System.lineSeparator(),
                "    public nl.loxia.builder.generator.ap.test.BuildableObjectBuilder");
    }

    @ProcessorTest
    @WithClasses({ JavadocAnnotatedFields.class, BuildableObject.class })
    void shouldGenerateJavadocAtSetMethod() {
        generatedSource.forBuilder(JavadocAnnotatedFields.class).content()
            .containsSequence(
                "    /**", System.lineSeparator(),
                "     * This field is used as an example for javadoc generation on with methods.", System.lineSeparator(),
                "     */", System.lineSeparator(),
                "    public JavadocAnnotatedFieldsBuilder<PARENT> withObject(nl.loxia.builder.generator.ap.test.BuildableObject object) {");
    }
}
